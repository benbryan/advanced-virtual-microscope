package avl.sv.client.study;

import avl.sv.client.AdvancedVirtualMicroscope;
import avl.sv.shared.AVM_ProgressMonitor;
import avl.sv.shared.ProgressBarForegroundPainter;
import avl.sv.shared.image.ImageManager;
import avl.sv.shared.image.ImageManagerSet;
import avl.sv.shared.image.ImageReference;
import avl.sv.shared.image.ImageSource;
import avl.sv.shared.study.AnnotationSet;
import avl.sv.shared.study.ROI_Folder;
import avl.sv.shared.study.ROI;

import avl.sv.shared.study.StudySource;
import java.io.File;
import java.util.ArrayList;
import java.util.concurrent.Executors;
import javax.swing.JFileChooser;
import javax.swing.UIManager;

public class ExportDialogROIsFullStudy extends javax.swing.JDialog {

    private final StudySource studySource;
    public ExportDialogROIsFullStudy(java.awt.Frame parent, boolean modal, StudySource studySource) {
        super(parent, modal);
        this.studySource = studySource;
        initComponents();
        
        File f = jFileChooserOutputDir.getFileSystemView().getDefaultDirectory();
        jFileChooserOutputDir.setCurrentDirectory(f);
        jFileChooserOutputDir.setSelectedFile(f);
        jFileChooserOutputDir.setMultiSelectionEnabled(false);
        jFileChooserOutputDir.setAcceptAllFileFilterUsed(false);
        jFileChooserOutputDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jTextFieldOutputDir.setText(f.getAbsolutePath());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooserOutputDir = new javax.swing.JFileChooser();
        jButtonExport = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jTextFieldOutputDir = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSpinnerJpegQuality = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Export ROIs Dialog");
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);

        jButtonExport.setText("Export");
        jButtonExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jTextFieldOutputDir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldOutputDirMouseClicked(evt);
            }
        });

        jLabel2.setText("JPEG Quality");

        jLabel1.setText("Output Directory");

        jSpinnerJpegQuality.setModel(new javax.swing.SpinnerNumberModel(95, 10, 100, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldOutputDir)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jSpinnerJpegQuality, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonExport)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldOutputDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jSpinnerJpegQuality, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonExport)
                    .addComponent(jButtonCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exportROI(ImageSource imageSource, ROI roi, File directory) {
        final String imageType = "tiff";
        final Integer tempInteger = (Integer) jSpinnerJpegQuality.getValue();
        final float jpegQuality = Math.round(((float) (tempInteger.floatValue())) / 100);
        File outFile = null;
        int i = 0;
        while (true) {
            String num = i == 0 ? "" : "_" + String.valueOf(i);
            outFile = new File(directory + File.separator + roi.getName() + num + "." + imageType);
            if (!outFile.exists()) {
                break;
            }
            if (i++ > 999999){
                return;
            }
        }
        String result = imageSource.exportROI(roi, outFile, jpegQuality);
        System.out.println(result);
        AdvancedVirtualMicroscope.setStatusText(result, 5000);
    }
    
    private void jButtonExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportActionPerformed
        UIManager.put("ProgressBar[Enabled].foregroundPainter", new ProgressBarForegroundPainter());
        final AVM_ProgressMonitor pm = new AVM_ProgressMonitor(rootPane, "Exporting ROIs", "", 0, 74674674 + 1);
        Executors.newSingleThreadExecutor().submit(() -> {
            int numelROIsToExport = 0;
            int progress = 0;
            ArrayList<ImageManagerSet> imageManagerSets = studySource.getImageManagerSets();
            for (ImageManagerSet imageManagerSet : imageManagerSets) {
                for (ImageManager imageManager : imageManagerSet.getImageManagerSet()) {
                    ImageReference imageReference = imageManager.imageReference;
                    AnnotationSet annoSet = studySource.getAnnotationSet(imageReference);
                    for (ROI_Folder folder : annoSet.getROI_Folders()) {
                        numelROIsToExport += folder.getROIs().size();
                    }
                }
            }
            pm.setMaximum(numelROIsToExport);
            for (ImageManagerSet imageManagerSet : imageManagerSets) {
                for (ImageManager imageManager : imageManagerSet.getImageManagerSet()) {
                    ImageReference imageReference = imageManager.imageReference;
                    File directory = new File(jFileChooserOutputDir.getSelectedFile() + File.separator + imageReference.imageSetName + File.separator + imageReference.imageName);
                    directory.mkdirs();
                    AnnotationSet annoSet = studySource.getAnnotationSet(imageReference);
                    ImageSource imageSource = studySource.getImagesSource().createImageSource(imageManager);
                    for (ROI_Folder folder : annoSet.getROI_Folders()) {
                        for (ROI roi : folder.getROIs()) {
                            pm.setNote("Image " + imageReference.imageSetName + File.separator+imageReference.imageName+ "\nExporting " + roi.getParent().toString() + File.separator + roi.toString());
                            pm.setProgress(progress++);
                            exportROI(imageSource, roi, directory);
                            if (pm.isCanceled()) {
                                imageSource.close();
                                return;
                            }
                        }
                    }
                    imageSource.close();
                }
            }
            pm.close();
        });
        setVisible(false);
    }//GEN-LAST:event_jButtonExportActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jTextFieldOutputDirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldOutputDirMouseClicked
        jFileChooserOutputDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jFileChooserOutputDir.setDialogTitle("Choose output directory");
        jFileChooserOutputDir.setApproveButtonText("Select Folder");
        if (jFileChooserOutputDir.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            jTextFieldOutputDir.setText(jFileChooserOutputDir.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_jTextFieldOutputDirMouseClicked
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonExport;
    private static javax.swing.JFileChooser jFileChooserOutputDir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSpinner jSpinnerJpegQuality;
    private javax.swing.JTextField jTextFieldOutputDir;
    // End of variables declaration//GEN-END:variables
}
