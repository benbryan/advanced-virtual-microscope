package avl.sv.client.study;

import avl.sv.client.AdvancedVirtualMicroscope;
import avl.sv.shared.AVM_ProgressMonitor;
import avl.sv.shared.ProgressBarForegroundPainter;
import avl.sv.shared.image.ImageAccessException;
import avl.sv.shared.image.ImageReference;
import avl.sv.shared.study.ROI_Folder;
import avl.sv.shared.study.Attribute;
import avl.sv.shared.study.ROI;

import avl.sv.shared.image.ImageSource;
import avl.tiff.TiffTag;
import com.sun.media.jai.codec.JPEGEncodeParam;
import com.sun.media.jai.codec.TIFFEncodeParam;
import com.sun.media.jai.codec.TIFFField;
import com.sun.media.jai.codecimpl.TIFFImageEncoder;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.concurrent.Executors;
import javax.media.jai.TiledImage;
import javax.swing.JFileChooser;
import javax.swing.UIManager;

public class ExportDialogROIs extends javax.swing.JDialog {

    private final ImageSource imageSource;
    private Object[] exportObjs;
    
    public ExportDialogROIs(java.awt.Frame parent, boolean modal, ImageSource imageSource) {
        super(parent, modal);
        this.imageSource = imageSource;
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExportDialogROIs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        initComponents();
        
        File f = jFileChooserOutputDir.getFileSystemView().getDefaultDirectory();
        jFileChooserOutputDir.setCurrentDirectory(f);
        jFileChooserOutputDir.setSelectedFile(f);
        jFileChooserOutputDir.setMultiSelectionEnabled(false);
        jFileChooserOutputDir.setAcceptAllFileFilterUsed(false);
        jFileChooserOutputDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jTextFieldOutputDir.setText(f.getAbsolutePath());
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooserOutputDir = new javax.swing.JFileChooser();
        jTextFieldNumOfSelectedROIs = new javax.swing.JTextField();
        jButtonExport = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldOutputDir = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSpinnerJpegQuality = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Export ROIs Dialog");
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);

        jTextFieldNumOfSelectedROIs.setEnabled(false);

        jButtonExport.setText("Export");
        jButtonExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jLabel3.setText("Number of ROIs Selected");

        jTextFieldOutputDir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldOutputDirMouseClicked(evt);
            }
        });

        jLabel2.setText("JPEG Quality");

        jLabel1.setText("Output Directory");

        jSpinnerJpegQuality.setModel(new javax.swing.SpinnerNumberModel(95, 10, 100, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldOutputDir)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jSpinnerJpegQuality)
                            .addComponent(jTextFieldNumOfSelectedROIs, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonExport)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldOutputDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldNumOfSelectedROIs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jSpinnerJpegQuality, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonExport)
                    .addComponent(jButtonCancel)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exportROI(ROI roi) {
        final String imageType = "tiff";
        final Integer tempInteger = (Integer) jSpinnerJpegQuality.getValue();
        final float jpegQuality = Math.round(((float) (tempInteger.floatValue())) / 100);
        for (int i = 0; i < 9999; i++) {
            String num = i == 0 ? "" : "_" + String.valueOf(i);
            File outFile = new File(jFileChooserOutputDir.getSelectedFile() + File.separator + roi.getName() + num + "." + imageType);
            if (outFile.exists()) {
                continue;
            }
            String result = imageSource.exportROI(roi, outFile, jpegQuality);
            System.out.println(result);
            AdvancedVirtualMicroscope.setStatusText(result, 5000);
        }
    }
    
    private void jButtonExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportActionPerformed
        int count = 0;
        for (Object obj : exportObjs) {
            if (obj instanceof ROI) {
                count++;
            }
            if (obj instanceof ROI_Folder) {
                ArrayList<ROI> rois = ((ROI_Folder) obj).getROIs();
                count += rois.size();
            }
        }
        UIManager.put("ProgressBar[Enabled].foregroundPainter", new ProgressBarForegroundPainter());
        final AVM_ProgressMonitor pm = new AVM_ProgressMonitor(rootPane, "Exporting ROIs", "", 0, count+1);
        Executors.newSingleThreadExecutor().submit(()->{
            int progress = 0;
            for (Object obj : exportObjs) {
                if (obj instanceof ROI) {
                    ROI roi = (ROI) obj;
                    pm.setNote("Exporting " + roi.getParent().toString() + "\"" + roi.toString());
                    pm.setProgress(progress++);
                    exportROI(roi);
                    if (pm.isCanceled()){
                        return;
                    }
                }
                if (obj instanceof ROI_Folder) {
                    ArrayList<ROI> rois = ((ROI_Folder) obj).getROIs();
                    for (ROI roi : rois) {
                        pm.setNote("Exporting " + roi.getParent().toString() + "\"" + roi.toString());
                        pm.setProgress(progress++);
                        exportROI(roi);
                        if (pm.isCanceled()){
                            return;
                        }
                    }
                }
            }
            pm.close();
            setVisible(false);
        });
    }//GEN-LAST:event_jButtonExportActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jTextFieldOutputDirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldOutputDirMouseClicked
        jFileChooserOutputDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jFileChooserOutputDir.setDialogTitle("Choose output directory");
        jFileChooserOutputDir.setApproveButtonText("Select Folder");
        if (jFileChooserOutputDir.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            jTextFieldOutputDir.setText(jFileChooserOutputDir.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_jTextFieldOutputDirMouseClicked

       
    public void promptForExport(Object exportObjs[]) {
        this.exportObjs = exportObjs;
        int numOfROIs = 0;
        for (Object obj : exportObjs) {
            if (obj instanceof ROI) {
                numOfROIs++;
             }
            if (obj instanceof ROI_Folder) {
                ArrayList<ROI> rois = ((ROI_Folder) obj).getROIs();
                numOfROIs+= rois.size();
            }
        }
        jTextFieldNumOfSelectedROIs.setText(String.valueOf(numOfROIs));
        setVisible(true);
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonExport;
    private static javax.swing.JFileChooser jFileChooserOutputDir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSpinner jSpinnerJpegQuality;
    private javax.swing.JTextField jTextFieldNumOfSelectedROIs;
    private javax.swing.JTextField jTextFieldOutputDir;
    // End of variables declaration//GEN-END:variables
}
